== Physical Plan ==
AdaptiveSparkPlan (148)
+- == Final Plan ==
   VeloxColumnarToRowExec (100)
   +- ^ SortExecTransformer (98)
      +- ^ InputIteratorTransformer (97)
         +- ShuffleQueryStage (95), Statistics(X)
            +- ColumnarExchange (94)
               +- ^ RegularHashAggregateExecTransformer (92)
                  +- ^ InputIteratorTransformer (91)
                     +- ShuffleQueryStage (89), Statistics(X)
                        +- ColumnarExchange (88)
                           +- ^ ProjectExecTransformer (86)
                              +- ^ FlushableHashAggregateExecTransformer (85)
                                 +- ^ ProjectExecTransformer (84)
                                    +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (83)
                                       :- ^ SortExecTransformer (77)
                                       :  +- ^ InputIteratorTransformer (76)
                                       :     +- ShuffleQueryStage (74), Statistics(X)
                                       :        +- ColumnarExchange (73)
                                       :           +- ^ ProjectExecTransformer (71)
                                       :              +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (70)
                                       :                 :- ^ SortExecTransformer (60)
                                       :                 :  +- ^ InputIteratorTransformer (59)
                                       :                 :     +- ShuffleQueryStage (57), Statistics(X)
                                       :                 :        +- ColumnarExchange (56)
                                       :                 :           +- ^ ProjectExecTransformer (54)
                                       :                 :              +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (53)
                                       :                 :                 :- ^ SortExecTransformer (43)
                                       :                 :                 :  +- ^ InputIteratorTransformer (42)
                                       :                 :                 :     +- ShuffleQueryStage (40), Statistics(X)
                                       :                 :                 :        +- ColumnarExchange (39)
                                       :                 :                 :           +- ^ ProjectExecTransformer (37)
                                       :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner BuildRight (36)
                                       :                 :                 :                 :- ^ SortExecTransformer (26)
                                       :                 :                 :                 :  +- ^ InputIteratorTransformer (25)
                                       :                 :                 :                 :     +- ShuffleQueryStage (23), Statistics(X)
                                       :                 :                 :                 :        +- ColumnarExchange (22)
                                       :                 :                 :                 :           +- ^ ProjectExecTransformer (20)
                                       :                 :                 :                 :              +- ^ ShuffledHashJoinExecTransformer Inner BuildLeft (19)
                                       :                 :                 :                 :                 :- ^ SortExecTransformer (9)
                                       :                 :                 :                 :                 :  +- ^ InputIteratorTransformer (8)
                                       :                 :                 :                 :                 :     +- ShuffleQueryStage (6), Statistics(X)
                                       :                 :                 :                 :                 :        +- ColumnarExchange (5)
                                       :                 :                 :                 :                 :           +- ^ ProjectExecTransformer (3)
                                       :                 :                 :                 :                 :              +- ^ NoopFilter (2)
                                       :                 :                 :                 :                 :                 +- ^ Scan parquet (1)
                                       :                 :                 :                 :                 +- ^ SortExecTransformer (18)
                                       :                 :                 :                 :                    +- ^ InputIteratorTransformer (17)
                                       :                 :                 :                 :                       +- ShuffleQueryStage (15), Statistics(X)
                                       :                 :                 :                 :                          +- ColumnarExchange (14)
                                       :                 :                 :                 :                             +- ^ ProjectExecTransformer (12)
                                       :                 :                 :                 :                                +- ^ NoopFilter (11)
                                       :                 :                 :                 :                                   +- ^ Scan parquet (10)
                                       :                 :                 :                 +- ^ SortExecTransformer (35)
                                       :                 :                 :                    +- ^ InputIteratorTransformer (34)
                                       :                 :                 :                       +- ShuffleQueryStage (32), Statistics(X)
                                       :                 :                 :                          +- ColumnarExchange (31)
                                       :                 :                 :                             +- ^ ProjectExecTransformer (29)
                                       :                 :                 :                                +- ^ NoopFilter (28)
                                       :                 :                 :                                   +- ^ Scan parquet (27)
                                       :                 :                 +- ^ SortExecTransformer (52)
                                       :                 :                    +- ^ InputIteratorTransformer (51)
                                       :                 :                       +- ShuffleQueryStage (49), Statistics(X)
                                       :                 :                          +- ColumnarExchange (48)
                                       :                 :                             +- ^ ProjectExecTransformer (46)
                                       :                 :                                +- ^ NoopFilter (45)
                                       :                 :                                   +- ^ Scan parquet (44)
                                       :                 +- ^ SortExecTransformer (69)
                                       :                    +- ^ InputIteratorTransformer (68)
                                       :                       +- ShuffleQueryStage (66), Statistics(X)
                                       :                          +- ColumnarExchange (65)
                                       :                             +- ^ ProjectExecTransformer (63)
                                       :                                +- ^ NoopFilter (62)
                                       :                                   +- ^ Scan parquet (61)
                                       +- ^ SortExecTransformer (82)
                                          +- ^ InputIteratorTransformer (81)
                                             +- ShuffleQueryStage (79), Statistics(X)
                                                +- ReusedExchange (78)
+- == Initial Plan ==
   Sort (147)
   +- Exchange (146)
      +- HashAggregate (145)
         +- Exchange (144)
            +- HashAggregate (143)
               +- Project (142)
                  +- SortMergeJoin Inner (141)
                     :- Sort (136)
                     :  +- Exchange (135)
                     :     +- Project (134)
                     :        +- SortMergeJoin Inner (133)
                     :           :- Sort (128)
                     :           :  +- Exchange (127)
                     :           :     +- Project (126)
                     :           :        +- SortMergeJoin Inner (125)
                     :           :           :- Sort (120)
                     :           :           :  +- Exchange (119)
                     :           :           :     +- Project (118)
                     :           :           :        +- SortMergeJoin Inner (117)
                     :           :           :           :- Sort (112)
                     :           :           :           :  +- Exchange (111)
                     :           :           :           :     +- Project (110)
                     :           :           :           :        +- SortMergeJoin Inner (109)
                     :           :           :           :           :- Sort (104)
                     :           :           :           :           :  +- Exchange (103)
                     :           :           :           :           :     +- Filter (102)
                     :           :           :           :           :        +- Scan parquet (101)
                     :           :           :           :           +- Sort (108)
                     :           :           :           :              +- Exchange (107)
                     :           :           :           :                 +- Filter (106)
                     :           :           :           :                    +- Scan parquet (105)
                     :           :           :           +- Sort (116)
                     :           :           :              +- Exchange (115)
                     :           :           :                 +- Filter (114)
                     :           :           :                    +- Scan parquet (113)
                     :           :           +- Sort (124)
                     :           :              +- Exchange (123)
                     :           :                 +- Filter (122)
                     :           :                    +- Scan parquet (121)
                     :           +- Sort (132)
                     :              +- Exchange (131)
                     :                 +- Filter (130)
                     :                    +- Scan parquet (129)
                     +- Sort (140)
                        +- Exchange (139)
                           +- Filter (138)
                              +- Scan parquet (137)


(1) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(2) NoopFilter
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: [s_suppkey#X, s_nationkey#X]

(3) ProjectExecTransformer
Output [3]: [hash(s_suppkey#X, 42) AS hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Input [2]: [s_suppkey#X, s_nationkey#X]

(4) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: false

(5) ColumnarExchange
Input [3]: [hash_partition_key#X, s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [s_suppkey#X, s_nationkey#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [2]: [s_suppkey#X, s_nationkey#X]
Arguments: X

(7) InputAdapter
Input [2]: [s_suppkey#X, s_nationkey#X]

(8) InputIteratorTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]

(9) SortExecTransformer
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], false, 0

(10) Scan parquet
Output [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,1996-12-31), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(11) NoopFilter
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(12) ProjectExecTransformer
Output [6]: [hash(l_suppkey#X, 42) AS hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(13) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: false

(14) ColumnarExchange
Input [6]: [hash_partition_key#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X], [plan_id=X], [id=#X]

(15) ShuffleQueryStage
Output [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: X

(16) InputAdapter
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(17) InputIteratorTransformer
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(18) SortExecTransformer
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_suppkey#X ASC NULLS FIRST], false, 0

(19) ShuffledHashJoinExecTransformer
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(20) ProjectExecTransformer
Output [6]: [hash(l_orderkey#X, 42) AS hash_partition_key#X, s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Input [7]: [s_suppkey#X, s_nationkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(21) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: false

(22) ColumnarExchange
Input [6]: [hash_partition_key#X, s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X], [plan_id=X], [id=#X]

(23) ShuffleQueryStage
Output [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: X

(24) InputAdapter
Input [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(25) InputIteratorTransformer
Input [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(26) SortExecTransformer
Input [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(27) Scan parquet
Output [2]: [o_orderkey#X, o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>

(28) NoopFilter
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: [o_orderkey#X, o_custkey#X]

(29) ProjectExecTransformer
Output [3]: [hash(o_orderkey#X, 42) AS hash_partition_key#X, o_orderkey#X, o_custkey#X]
Input [2]: [o_orderkey#X, o_custkey#X]

(30) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: false

(31) ColumnarExchange
Input [3]: [hash_partition_key#X, o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [o_orderkey#X, o_custkey#X], [plan_id=X], [id=#X]

(32) ShuffleQueryStage
Output [2]: [o_orderkey#X, o_custkey#X]
Arguments: X

(33) InputAdapter
Input [2]: [o_orderkey#X, o_custkey#X]

(34) InputIteratorTransformer
Input [2]: [o_orderkey#X, o_custkey#X]

(35) SortExecTransformer
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: [o_orderkey#X ASC NULLS FIRST], false, 0

(36) ShuffledHashJoinExecTransformer
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(37) ProjectExecTransformer
Output [6]: [hash(o_custkey#X, 42) AS hash_partition_key#X, s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Input [7]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_orderkey#X, o_custkey#X]

(38) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Arguments: false

(39) ColumnarExchange
Input [6]: [hash_partition_key#X, s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X], [plan_id=X], [id=#X]

(40) ShuffleQueryStage
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Arguments: X

(41) InputAdapter
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]

(42) InputIteratorTransformer
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]

(43) SortExecTransformer
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Arguments: [o_custkey#X ASC NULLS FIRST], false, 0

(44) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(45) NoopFilter
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: [c_custkey#X, c_nationkey#X]

(46) ProjectExecTransformer
Output [3]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_nationkey#X]
Input [2]: [c_custkey#X, c_nationkey#X]

(47) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: false

(48) ColumnarExchange
Input [3]: [hash_partition_key#X, c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_nationkey#X], [plan_id=X], [id=#X]

(49) ShuffleQueryStage
Output [2]: [c_custkey#X, c_nationkey#X]
Arguments: X

(50) InputAdapter
Input [2]: [c_custkey#X, c_nationkey#X]

(51) InputIteratorTransformer
Input [2]: [c_custkey#X, c_nationkey#X]

(52) SortExecTransformer
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: [c_custkey#X ASC NULLS FIRST], false, 0

(53) ShuffledHashJoinExecTransformer
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(54) ProjectExecTransformer
Output [6]: [hash(s_nationkey#X, 42) AS hash_partition_key#X, s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X, c_custkey#X, c_nationkey#X]

(55) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Arguments: false

(56) ColumnarExchange
Input [6]: [hash_partition_key#X, s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X], [plan_id=X], [id=#X]

(57) ShuffleQueryStage
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Arguments: X

(58) InputAdapter
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]

(59) InputIteratorTransformer
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]

(60) SortExecTransformer
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Arguments: [s_nationkey#X ASC NULLS FIRST], false, 0

(61) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,FRANCE),EqualTo(n_name,GERMANY))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(62) NoopFilter
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X, n_name#X]

(63) ProjectExecTransformer
Output [3]: [hash(n_nationkey#X, 42) AS hash_partition_key#X, n_nationkey#X, n_name#X]
Input [2]: [n_nationkey#X, n_name#X]

(64) WholeStageCodegenTransformer (X)
Input [3]: [hash_partition_key#X, n_nationkey#X, n_name#X]
Arguments: false

(65) ColumnarExchange
Input [3]: [hash_partition_key#X, n_nationkey#X, n_name#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [n_nationkey#X, n_name#X], [plan_id=X], [id=#X]

(66) ShuffleQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: X

(67) InputAdapter
Input [2]: [n_nationkey#X, n_name#X]

(68) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(69) SortExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(70) ShuffledHashJoinExecTransformer
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(71) ProjectExecTransformer
Output [6]: [hash(c_nationkey#X, 42) AS hash_partition_key#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_nationkey#X, n_name#X]

(72) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Arguments: false

(73) ColumnarExchange
Input [6]: [hash_partition_key#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Arguments: hashpartitioning(c_nationkey#X, 1), ENSURE_REQUIREMENTS, [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X], [plan_id=X], [id=#X]

(74) ShuffleQueryStage
Output [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Arguments: X

(75) InputAdapter
Input [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]

(76) InputIteratorTransformer
Input [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]

(77) SortExecTransformer
Input [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Arguments: [c_nationkey#X ASC NULLS FIRST], false, 0

(78) ReusedExchange [Reuses operator id: 65]
Output [2]: [n_nationkey#X, n_name#X]

(79) ShuffleQueryStage
Output [2]: [n_nationkey#X, n_name#X]
Arguments: X

(80) InputAdapter
Input [2]: [n_nationkey#X, n_name#X]

(81) InputIteratorTransformer
Input [2]: [n_nationkey#X, n_name#X]

(82) SortExecTransformer
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(83) ShuffledHashJoinExecTransformer
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: (((n_name#X = FRANCE) AND (n_name#X = GERMANY)) OR ((n_name#X = GERMANY) AND (n_name#X = FRANCE)))

(84) ProjectExecTransformer
Output [4]: [n_name#X AS supp_nation#X, n_name#X AS cust_nation#X, year(l_shipdate#X) AS l_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X]
Input [7]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X, n_nationkey#X, n_name#X]

(85) FlushableHashAggregateExecTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, volume#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [partial_sum(volume#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(86) ProjectExecTransformer
Output [6]: [hash(supp_nation#X, cust_nation#X, l_year#X, 42) AS hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(87) WholeStageCodegenTransformer (X)
Input [6]: [hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: false

(88) ColumnarExchange
Input [6]: [hash_partition_key#X, supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(supp_nation#X, cust_nation#X, l_year#X, 1), ENSURE_REQUIREMENTS, [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(89) ShuffleQueryStage
Output [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: X

(90) InputAdapter
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(91) InputIteratorTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(92) RegularHashAggregateExecTransformer
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [sum(volume#X)]
Aggregate Attributes [1]: [sum(volume#X)#X]
Results [4]: [supp_nation#X, cust_nation#X, l_year#X, sum(volume#X)#X AS revenue#X]

(93) WholeStageCodegenTransformer (X)
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: false

(94) ColumnarExchange
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: rangepartitioning(supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(95) ShuffleQueryStage
Output [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: X

(96) InputAdapter
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]

(97) InputIteratorTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]

(98) SortExecTransformer
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: [supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST], true, 0

(99) WholeStageCodegenTransformer (X)
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: false

(100) VeloxColumnarToRowExec
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]

(101) Scan parquet
Output [2]: [s_suppkey#X, s_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>

(102) Filter
Input [2]: [s_suppkey#X, s_nationkey#X]
Condition : (isnotnull(s_suppkey#X) AND isnotnull(s_nationkey#X))

(103) Exchange
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: hashpartitioning(s_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(104) Sort
Input [2]: [s_suppkey#X, s_nationkey#X]
Arguments: [s_suppkey#X ASC NULLS FIRST], false, 0

(105) Scan parquet
Output [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(l_shipdate), GreaterThanOrEqual(l_shipdate,1995-01-01), LessThanOrEqual(l_shipdate,1996-12-31), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2),l_shipdate:date>

(106) Filter
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Condition : ((((isnotnull(l_shipdate#X) AND (l_shipdate#X >= 1995-01-01)) AND (l_shipdate#X <= 1996-12-31)) AND isnotnull(l_suppkey#X)) AND isnotnull(l_orderkey#X))

(107) Exchange
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: hashpartitioning(l_suppkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(108) Sort
Input [5]: [l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_suppkey#X ASC NULLS FIRST], false, 0

(109) SortMergeJoin
Left keys [1]: [s_suppkey#X]
Right keys [1]: [l_suppkey#X]
Join condition: None

(110) Project
Output [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Input [7]: [s_suppkey#X, s_nationkey#X, l_orderkey#X, l_suppkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]

(111) Exchange
Input [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: hashpartitioning(l_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(112) Sort
Input [5]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X]
Arguments: [l_orderkey#X ASC NULLS FIRST], false, 0

(113) Scan parquet
Output [2]: [o_orderkey#X, o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)]
ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>

(114) Filter
Input [2]: [o_orderkey#X, o_custkey#X]
Condition : (isnotnull(o_orderkey#X) AND isnotnull(o_custkey#X))

(115) Exchange
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: hashpartitioning(o_orderkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(116) Sort
Input [2]: [o_orderkey#X, o_custkey#X]
Arguments: [o_orderkey#X ASC NULLS FIRST], false, 0

(117) SortMergeJoin
Left keys [1]: [l_orderkey#X]
Right keys [1]: [o_orderkey#X]
Join condition: None

(118) Project
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Input [7]: [s_nationkey#X, l_orderkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_orderkey#X, o_custkey#X]

(119) Exchange
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(120) Sort
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X]
Arguments: [o_custkey#X ASC NULLS FIRST], false, 0

(121) Scan parquet
Output [2]: [c_custkey#X, c_nationkey#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)]
ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>

(122) Filter
Input [2]: [c_custkey#X, c_nationkey#X]
Condition : (isnotnull(c_custkey#X) AND isnotnull(c_nationkey#X))

(123) Exchange
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(124) Sort
Input [2]: [c_custkey#X, c_nationkey#X]
Arguments: [c_custkey#X ASC NULLS FIRST], false, 0

(125) SortMergeJoin
Left keys [1]: [o_custkey#X]
Right keys [1]: [c_custkey#X]
Join condition: None

(126) Project
Output [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, o_custkey#X, c_custkey#X, c_nationkey#X]

(127) Exchange
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Arguments: hashpartitioning(s_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(128) Sort
Input [5]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X]
Arguments: [s_nationkey#X ASC NULLS FIRST], false, 0

(129) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,FRANCE),EqualTo(n_name,GERMANY))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(130) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : (isnotnull(n_nationkey#X) AND ((n_name#X = FRANCE) OR (n_name#X = GERMANY)))

(131) Exchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(132) Sort
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(133) SortMergeJoin
Left keys [1]: [s_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: None

(134) Project
Output [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Input [7]: [s_nationkey#X, l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_nationkey#X, n_name#X]

(135) Exchange
Input [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Arguments: hashpartitioning(c_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(136) Sort
Input [5]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X]
Arguments: [c_nationkey#X ASC NULLS FIRST], false, 0

(137) Scan parquet
Output [2]: [n_nationkey#X, n_name#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,GERMANY),EqualTo(n_name,FRANCE))]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(138) Filter
Input [2]: [n_nationkey#X, n_name#X]
Condition : (isnotnull(n_nationkey#X) AND ((n_name#X = GERMANY) OR (n_name#X = FRANCE)))

(139) Exchange
Input [2]: [n_nationkey#X, n_name#X]
Arguments: hashpartitioning(n_nationkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(140) Sort
Input [2]: [n_nationkey#X, n_name#X]
Arguments: [n_nationkey#X ASC NULLS FIRST], false, 0

(141) SortMergeJoin
Left keys [1]: [c_nationkey#X]
Right keys [1]: [n_nationkey#X]
Join condition: (((n_name#X = FRANCE) AND (n_name#X = GERMANY)) OR ((n_name#X = GERMANY) AND (n_name#X = FRANCE)))

(142) Project
Output [4]: [n_name#X AS supp_nation#X, n_name#X AS cust_nation#X, year(l_shipdate#X) AS l_year#X, CheckOverflow((promote_precision(cast(l_extendedprice#X as decimal(13,2))) * promote_precision(CheckOverflow((1.00 - promote_precision(cast(l_discount#X as decimal(13,2)))), DecimalType(13,2)))), DecimalType(26,4)) AS volume#X]
Input [7]: [l_extendedprice#X, l_discount#X, l_shipdate#X, c_nationkey#X, n_name#X, n_nationkey#X, n_name#X]

(143) HashAggregate
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, volume#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [partial_sum(volume#X)]
Aggregate Attributes [2]: [sum#X, isEmpty#X]
Results [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]

(144) Exchange
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(supp_nation#X, cust_nation#X, l_year#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(145) HashAggregate
Input [5]: [supp_nation#X, cust_nation#X, l_year#X, sum#X, isEmpty#X]
Keys [3]: [supp_nation#X, cust_nation#X, l_year#X]
Functions [1]: [sum(volume#X)]
Aggregate Attributes [1]: [sum(volume#X)#X]
Results [4]: [supp_nation#X, cust_nation#X, l_year#X, sum(volume#X)#X AS revenue#X]

(146) Exchange
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: rangepartitioning(supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(147) Sort
Input [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: [supp_nation#X ASC NULLS FIRST, cust_nation#X ASC NULLS FIRST, l_year#X ASC NULLS FIRST], true, 0

(148) AdaptiveSparkPlan
Output [4]: [supp_nation#X, cust_nation#X, l_year#X, revenue#X]
Arguments: isFinalPlan=true