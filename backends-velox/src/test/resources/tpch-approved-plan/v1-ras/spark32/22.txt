== Physical Plan ==
AdaptiveSparkPlan (50)
+- == Final Plan ==
   VeloxColumnarToRowExec (35)
   +- ^ SortExecTransformer (33)
      +- ^ InputIteratorTransformer (32)
         +- ShuffleQueryStage (30)
            +- ColumnarExchange (29)
               +- ^ RegularHashAggregateExecTransformer (27)
                  +- ^ InputIteratorTransformer (26)
                     +- ShuffleQueryStage (24)
                        +- ColumnarExchange (23)
                           +- ^ ProjectExecTransformer (21)
                              +- ^ FlushableHashAggregateExecTransformer (20)
                                 +- ^ ProjectExecTransformer (19)
                                    +- ^ ShuffledHashJoinExecTransformer LeftAnti BuildRight (18)
                                       :- ^ SortExecTransformer (9)
                                       :  +- ^ InputIteratorTransformer (8)
                                       :     +- ShuffleQueryStage (6)
                                       :        +- ColumnarExchange (5)
                                       :           +- ^ ProjectExecTransformer (3)
                                       :              +- ^ NoopFilter (2)
                                       :                 +- ^ Scan parquet (1)
                                       +- ^ SortExecTransformer (17)
                                          +- ^ InputIteratorTransformer (16)
                                             +- ShuffleQueryStage (14)
                                                +- ColumnarExchange (13)
                                                   +- ^ ProjectExecTransformer (11)
                                                      +- ^ Scan parquet (10)
+- == Initial Plan ==
   Sort (49)
   +- Exchange (48)
      +- HashAggregate (47)
         +- Exchange (46)
            +- HashAggregate (45)
               +- Project (44)
                  +- SortMergeJoin LeftAnti (43)
                     :- Sort (39)
                     :  +- Exchange (38)
                     :     +- Filter (37)
                     :        +- Scan parquet (36)
                     +- Sort (42)
                        +- Exchange (41)
                           +- Scan parquet (40)


(1) Scan parquet
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal)]
ReadSchema: struct<c_custkey:bigint,c_phone:string,c_acctbal:decimal(12,2)>

(2) NoopFilter
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: [c_custkey#X, c_phone#X, c_acctbal#X]

(3) ProjectExecTransformer
Output [4]: [hash(c_custkey#X, 42) AS hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(4) WholeStageCodegenTransformer (X)
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: false

(5) ColumnarExchange
Input [4]: [hash_partition_key#X, c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [c_custkey#X, c_phone#X, c_acctbal#X], [plan_id=X], [id=#X]

(6) ShuffleQueryStage
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: X

(7) InputAdapter
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(8) InputIteratorTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(9) SortExecTransformer
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: [c_custkey#X ASC NULLS FIRST], false, 0

(10) Scan parquet
Output [1]: [o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<o_custkey:bigint>

(11) ProjectExecTransformer
Output [2]: [hash(o_custkey#X, 42) AS hash_partition_key#X, o_custkey#X]
Input [1]: [o_custkey#X]

(12) WholeStageCodegenTransformer (X)
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: false

(13) ColumnarExchange
Input [2]: [hash_partition_key#X, o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [o_custkey#X], [plan_id=X], [id=#X]

(14) ShuffleQueryStage
Output [1]: [o_custkey#X]
Arguments: X

(15) InputAdapter
Input [1]: [o_custkey#X]

(16) InputIteratorTransformer
Input [1]: [o_custkey#X]

(17) SortExecTransformer
Input [1]: [o_custkey#X]
Arguments: [o_custkey#X ASC NULLS FIRST], false, 0

(18) ShuffledHashJoinExecTransformer
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(19) ProjectExecTransformer
Output [2]: [substring(c_phone#X, 1, 2) AS cntrycode#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(20) FlushableHashAggregateExecTransformer
Input [2]: [cntrycode#X, c_acctbal#X]
Keys [1]: [cntrycode#X]
Functions [2]: [partial_count(1), partial_sum(c_acctbal#X)]
Aggregate Attributes [3]: [count#X, sum#X, isEmpty#X]
Results [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(21) ProjectExecTransformer
Output [5]: [hash(cntrycode#X, 42) AS hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(22) WholeStageCodegenTransformer (X)
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: false

(23) ColumnarExchange
Input [5]: [hash_partition_key#X, cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(cntrycode#X, 1), ENSURE_REQUIREMENTS, [cntrycode#X, count#X, sum#X, isEmpty#X], [plan_id=X], [id=#X]

(24) ShuffleQueryStage
Output [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: X

(25) InputAdapter
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(26) InputIteratorTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(27) RegularHashAggregateExecTransformer
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Keys [1]: [cntrycode#X]
Functions [2]: [count(1), sum(c_acctbal#X)]
Aggregate Attributes [2]: [count(1)#X, sum(c_acctbal#X)#X]
Results [3]: [cntrycode#X, count(1)#X AS numcust#X, sum(c_acctbal#X)#X AS totacctbal#X]

(28) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false

(29) ColumnarExchange
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: rangepartitioning(cntrycode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X], [id=#X]

(30) ShuffleQueryStage
Output [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: X

(31) InputAdapter
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(32) InputIteratorTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(33) SortExecTransformer
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: [cntrycode#X ASC NULLS FIRST], true, 0

(34) WholeStageCodegenTransformer (X)
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: false

(35) VeloxColumnarToRowExec
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]

(36) Scan parquet
Output [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Batched: true
Location: InMemoryFileIndex [*]
PushedFilters: [IsNotNull(c_acctbal)]
ReadSchema: struct<c_custkey:bigint,c_phone:string,c_acctbal:decimal(12,2)>

(37) Filter
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Condition : ((isnotnull(c_acctbal#X) AND substring(c_phone#X, 1, 2) IN (13,31,23,29,30,18,17)) AND (cast(c_acctbal#X as decimal(16,6)) > Subquery subquery#X, [id=#X]))

(38) Exchange
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: hashpartitioning(c_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(39) Sort
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]
Arguments: [c_custkey#X ASC NULLS FIRST], false, 0

(40) Scan parquet
Output [1]: [o_custkey#X]
Batched: true
Location: InMemoryFileIndex [*]
ReadSchema: struct<o_custkey:bigint>

(41) Exchange
Input [1]: [o_custkey#X]
Arguments: hashpartitioning(o_custkey#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(42) Sort
Input [1]: [o_custkey#X]
Arguments: [o_custkey#X ASC NULLS FIRST], false, 0

(43) SortMergeJoin
Left keys [1]: [c_custkey#X]
Right keys [1]: [o_custkey#X]
Join condition: None

(44) Project
Output [2]: [substring(c_phone#X, 1, 2) AS cntrycode#X, c_acctbal#X]
Input [3]: [c_custkey#X, c_phone#X, c_acctbal#X]

(45) HashAggregate
Input [2]: [cntrycode#X, c_acctbal#X]
Keys [1]: [cntrycode#X]
Functions [2]: [partial_count(1), partial_sum(c_acctbal#X)]
Aggregate Attributes [3]: [count#X, sum#X, isEmpty#X]
Results [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]

(46) Exchange
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Arguments: hashpartitioning(cntrycode#X, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(47) HashAggregate
Input [4]: [cntrycode#X, count#X, sum#X, isEmpty#X]
Keys [1]: [cntrycode#X]
Functions [2]: [count(1), sum(c_acctbal#X)]
Aggregate Attributes [2]: [count(1)#X, sum(c_acctbal#X)#X]
Results [3]: [cntrycode#X, count(1)#X AS numcust#X, sum(c_acctbal#X)#X AS totacctbal#X]

(48) Exchange
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: rangepartitioning(cntrycode#X ASC NULLS FIRST, 1), ENSURE_REQUIREMENTS, [plan_id=X]

(49) Sort
Input [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: [cntrycode#X ASC NULLS FIRST], true, 0

(50) AdaptiveSparkPlan
Output [3]: [cntrycode#X, numcust#X, totacctbal#X]
Arguments: isFinalPlan=true